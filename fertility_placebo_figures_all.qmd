---
params:
  type: "race"
  model_rank: NA
  csv_prefix: "~/Downloads/joint_bimonthly_results/joint_bimonthly_gamma_overdispersed"
  suffix: NA 
  sensitivity: FALSE
  model_fits_file: "dobbs_birth_fits.csv"
  placebo_time: "2020-03-01"
title: "Effects of Abortion Bans - `r params$type` analysis - rank `r params$model_rank`"
author: Alex Franks
format: 
  html:
   code-fold: true
   code-summary: "Show the code"
   embed-resources: true
   toc: true
   output-ext: "html"
   grid:
    sidebar-width: 0px
    body-width: 1000px
---

```{r packages, message=FALSE}
source("plot_utilities.R")

options(dplyr.summarise.inform = FALSE)

library(tidyverse)
library(tidybayes)
library(posterior)
library(jsonlite)
library(kableExtra)
library(gt)

suffix <- "placebo"
fig_format <- "png"
## fig_prefix <- paste(suffix, "/", sep="")
fig_prefix <- ""
dates <- c("2016-03-01", "2016-05-01", "2016-07-01",  "2016-09-01", "2016-11-01",
            "2017-03-01", "2017-05-01", "2017-07-01", "2017-09-01", "2017-11-01",
            "2018-03-01", "2018-05-01", "2018-07-01", "2018-09-01", "2018-11-01",
            "2019-03-01", "2019-05-01", "2019-07-01", "2019-09-01", "2019-11-01",
            "2020-03-01")
all_samples <- tibble()
type <- "total"
rank <- 7

for(date in dates) {

    df <- read_csv(sprintf("results/placebo/df_%s_%s.csv", suffix, date))
    df |>
    mutate(
            start_date = ym(paste(year, "-", bmcode * 2 - 1)),
            end_date = start_date + months(2) - days(1)
            ) -> df
    df$exposed_births = df$exposure_code

    # fill_in_missing_denoms <- function(dat) {
    #     pop_index_2022 <- which.max(dat$year == 2022)
    #     pop_index_2021 <- which.max(dat$year == 2021)
    #     dat %>% mutate_at(vars(contains("pop")), ~ ifelse(is.na(.), .[pop_index_2022]^2 / .[pop_index_2021], .))
    # }

    # ## Hacky imputation
    # df <- df %>%
    #     group_by(state) %>%
    #     group_modify(~ fill_in_missing_denoms(.)) %>%
    #     ungroup()

    df$time <- lubridate::ymd(paste0(df$year, "-", 2*df$bmcode-1, "-01"))

    df$dobbs_code <- df$dobbscodev2
    # df <- df %>% group_by(state) %>% fill(exposed_births, .direction="down") %>% ungroup()
    # df <- df %>% group_by(state) %>% fill(exposed_infdeaths, .direction="down") %>% ungroup()

    categories_list <- list(age = c("age1524", "age2534", "age3544"), 
        edu = c("nohs", "hs", "somecoll", "coll"),
        #edu = c("hs_less", "somecoll_more"),
        insurance = c("medicaid", "nonmedicaid"),
        marital = c("married", "unmarried"),
        race = c("nhwhite", "nhblack", "hisp", "otherraceeth"),
        total = c("total"))

    df <- df %>% group_by(state) %>% 
    mutate(ban = ifelse(any(exposure_code == 1), TRUE, FALSE))

    model_rank <- rank
    df2 <- df
    
    type_samples <- read_csv(sprintf("results/placebo/NB_births_%s_%i_%s_%s.csv", type, model_rank, suffix, date))

    categories <- categories_list[[type]]

    agg_category_name = "total"
    merged_df <- merge_draws_and_data(df2, type_samples,  categories=categories, agg_category_name=agg_category_name)
    df_ban_no_tx_treat_time <- merged_df %>% 
        filter(!(state %in% c("Texas", "Ban States")),  exposure_code==1) %>% 
        pull(time) %>% min()
    df_ban_no_tx <- merged_df %>% filter(state == "Ban States" ) %>% 
        mutate(exposure_code = ifelse(time >= df_ban_no_tx_treat_time, 1, 0))
    df_tx <- merged_df %>% filter(state == "Texas")
    df_ban_no_tx <- df_ban_no_tx %>% 
        mutate(state = "Ban States (excl. Texas)",
        ban = TRUE, 
        exposure_code = ifelse(time >= df_ban_no_tx_treat_time, 1, 0),
        ypred = df_ban_no_tx$ypred - df_tx$ypred,
        mu = log(exp(df_ban_no_tx$mu) - exp(df_tx$mu)),
        mu_treated = log(exp(df_ban_no_tx$mu_treated) - exp(df_tx$mu_treated)),
        pop = df_ban_no_tx$pop - df_tx$pop,
        births = df_ban_no_tx$births - df_tx$births,
        D = max(merged_df$D) + 1
        )
    merged_df <- merged_df %>% bind_rows(df_ban_no_tx)

    
    merged_df$type <- type
    merged_df$rank <- model_rank
    merged_df$placebo_time <- date
    all_samples <- bind_rows(all_samples, merged_df)

}
all_samples <- all_samples %>% mutate(exposure_code = ifelse(is.na(exposure_code), 0, exposure_code))

```


## Event-Time Gap Plots

```{r}
all_samples %>% filter(ban==1, !(state %in% c("Ban States", "Ban States (excl. Texas)")), type=="total") %>% 
  group_by(state, placebo_time) %>% 
  mutate(event_time = as.numeric(factor(time, levels=unique(time)))) %>%
  mutate(min_event_time = min(event_time[exposure_code == 1])) %>%
  mutate(event_time = event_time - min_event_time) %>% 
  ungroup() %>% 
  group_by(event_time, placebo_time, .draw) %>% 
  summarize(births = sum(births), pop=sum(pop), 
            ypred = sum(ypred), mu = log(sum(exp(mu))), 
            mu_treated = log(sum(exp(mu_treated)))) %>% 
  ungroup() %>%
  group_by(event_time, placebo_time) %>%
  summarize(ypred_mean=mean(ypred), 
            ypred_lower=quantile(ypred, 0.025), ypred_upper=quantile(ypred, 0.975), 
            births=mean(births),
            pop = mean(pop)) %>% 
  ungroup() %>%
  mutate(pre_ban = event_time < 0) -> event_time_df

  # event_time_df %>% write_csv("results/event_time_results.csv")

  event_time_df %>%
  ggplot() +
    geom_ribbon(aes(
      x = event_time,
      ymax = log(births) - log(ypred_lower),
      ymin = log(births) - log(ypred_upper),
      group = pre_ban
    ), alpha = 0.25) +
    geom_line(aes(x = event_time, y = log(births) - log(ypred_mean), group=pre_ban), color = "red") +
    theme_bw() +
    geom_hline(yintercept = 0, col = "black", linetype = "dashed", alpha=0.75) +
    xlab("Event Time") + 
    facet_wrap(~placebo_time, scales="free") 

ggsave("figs/supplement_figures/placebo/placebo_gap_plot.png", width=10, height=10)

```


## Interval Plots

```{r}
merged_df <- all_samples
merged_df <- merged_df %>%
    filter(exposure_code == 1) %>%
    mutate(years = mean(interval(start_date, end_date) / years(1)))

## Remove Ban States, these will be recomputed below
merged_df <- merged_df %>% filter(!state %in% c("Ban States", "Ban States (excl. Texas)"))
  

  ## Compute ratio of birth rates (rates per 1000 people per year (or the rate_normalizer))
state_df <- merged_df %>%
    group_by_at(c("placebo_time", ".draw", "time", "state")) %>%
    mutate(treated = sum(exp(mu_treated)), untreated = sum(exp(mu)), denom = mean(pop * years)) %>%
    ungroup()
      
ban_states_df <- state_df %>%
    group_by_at(c(".draw", "placebo_time", "time")) %>%
    summarize(treated = sum(treated), untreated = sum(untreated), denom = sum(denom)) %>%
    mutate(D = max(state_df$D) + 1, state = "Ban States", ban = TRUE)

ban_states_no_tx_df <- state_df %>%
    filter(state != "Texas") %>%
    group_by_at(c(".draw", "placebo_time", "time")) %>%
    summarize(treated = sum(treated), untreated = sum(untreated), denom = sum(denom)) %>%
    mutate(D = max(state_df$D) + 2, state = "Ban States (excl. Texas)", ban = TRUE)
      
      
state_df <- bind_rows(state_df %>% select_at(colnames(ban_states_df)), ban_states_df, ban_states_no_tx_df)
state_df <- state_df %>% filter(state == "Ban States")

rate_normalizer <- 1000            
state_df <- state_df %>% group_by_at(c(".draw", "placebo_time")) %>%
    summarize(
        treated_rate = sum(treated) / sum(denom) * rate_normalizer,
        untreated_rate = sum(untreated) / sum(denom) * rate_normalizer,
        causal_effect_diff = treated_rate - untreated_rate,
        causal_effect_ratio = 100*(treated_rate / untreated_rate - 1),
        causal_effect = causal_effect_ratio
    ) %>% ungroup()
        
state_df <- state_df %>%
    mutate(state = fct_relevel(
        state,
        "Ban States (excl. Texas)",
        "Ban States",
    )) %>%
    mutate(state = fct_recode(state,
        "States w/ bans" = "Ban States",
        "States w/ bans (excl. Texas)" = "Ban States (excl. Texas)"
    ))


state_df %>%
#filter(category != "total") %>%
    ggplot(aes(x = placebo_time, y = causal_effect)) +
    ggdist::stat_pointinterval(aes(
        alpha = after_stat(level)
    ), position = "dodge", .width = c(0.95, 0.67)) +
    ggdist::scale_interval_alpha_continuous(range = c(0.75, 1)) +
    colorspace::scale_color_discrete_qualitative() +
    scale_alpha_manual(values = c(0.5, 1), ) +
    theme_bw(base_size = 16) +
    geom_hline(yintercept = 0, linetype = "dashed") +
    ylab("Expected Percent Change") +
    xlab("") +
    guides(colour = guide_legend(reverse=T)) + 
    theme(strip.text.y = element_blank(), axis.text.x = element_text(angle=45, hjust=1)) + 
    geom_hline(yintercept = 1.7, linetype="dashed", color="red")


ggsave("figs/supplement_figures/placebo/placebo_interval_plot.png", width=15, height=10)


state_df %>%
    group_by(placebo_time) %>% 
    summarize(mean_effect = mean(causal_effect)) %>%
    ggplot() +
    geom_point(aes(x=placebo_time, y=mean_effect)) + 
    geom_vline(xintercept = 1.7, linetype="dashed", col="red")
ggsave("~/Desktop/tmp.png")

    ggplot(aes(x = placebo_time, y = causal_effect)) +
    ggdist::stat_pointinterval(aes(
        alpha = after_stat(level)
    ), position = "dodge", .width = c(0.95, 0.67)) +
    ggdist::scale_interval_alpha_continuous(range = c(0.75, 1)) +
    colorspace::scale_color_discrete_qualitative() +
    scale_alpha_manual(values = c(0.5, 1), ) +
    theme_bw(base_size = 16) +
    geom_hline(yintercept = 0, linetype = "dashed") +
    ylab("Expected Percent Change") +
    xlab("") +
    guides(colour = guide_legend(reverse=T)) + 
    theme(strip.text.y = element_blank()) + 
    geom_hline(yintercept = 1.7, linetype="dashed", color="red")

```


