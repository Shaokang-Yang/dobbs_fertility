---
params:
  type: "race"
  model_rank: NA
  csv_prefix: "~/Downloads/joint_bimonthly_results/joint_bimonthly_gamma_overdispersed"
  suffix: NA 
  model_fits_file: "model_fit_births.csv" 
title: "Texas `r params$type` analysis - rank `r params$model_rank`"
author: Alex Franks
format: 
  html:
   code-fold: true
   code-summary: "Show the code"
   embed-resources: true
   toc: true
   output-ext: "html"
   grid:
    sidebar-width: 0px
    body-width: 1000px
---

```{r packages, message=FALSE}
options(dplyr.summarise.inform = FALSE)

library(tidyverse)
library(tidybayes)
library(posterior)
library(jsonlite)
library(kableExtra)
library(gt)
source("plot_utilities.R")

df <- read_csv("data/dobbsbimonthlybirthsdeaths_7_5_24.csv")
df |>
  mutate(
          start_date = ym(paste(year, "-", bmcode * 2 - 1)),
          end_date = start_date + months(2) - days(1)
        ) -> df


fill_in_missing_denoms <- function(dat) {
    pop_index_2022 <- which.max(dat$year == 2022)
    pop_index_2021 <- which.max(dat$year == 2021)
    dat %>% mutate_at(vars(contains("pop")), ~ ifelse(is.na(.), .[pop_index_2022]^2 / .[pop_index_2021], .))
}

## Hacky imputation
df <- df %>%
    group_by(state) %>%
    group_modify(~ fill_in_missing_denoms(.)) %>%
    ungroup()



df$time <- lubridate::ymd(paste0(df$year, "-", 2*df$bmcode-1, "-01"))
df <- df %>% filter(time >= "2016-01-01") -> df
df$dobbs_code <- df$dobbscodev2
df <- df %>% group_by(state) %>% fill(dobbs_code, .direction="down") %>% ungroup()
df <- df %>%
    group_by(state) %>%
    mutate(dobbs_code = ifelse(time < "2023-01-01", 0, dobbs_code)) %>%
    ungroup() %>%
    mutate(dobbs_code = ifelse(state == "Texas" & time >= "2022-04-01", 1, dobbs_code)) %>% 
    mutate(dobbs_code = ifelse(state %in% c("Kentucky", "Louisiana") & time < "2023-02-01", 0, dobbs_code)) %>%
    mutate(dobbs_code = ifelse(state %in% c("Idaho", "Tennessee") & time < "2023-03-01", 0, dobbs_code)) %>%
    mutate(dobbs_code = ifelse(state == "Georgia", 0, dobbs_code))


df <- df %>% group_by(state) %>% mutate(ban = ifelse(any(dobbs_code == 1), TRUE, FALSE))

model_rank <- params$model_rank
type <- params$type
csv_prefix <- params$csv_prefix
suffix <- params$suffix

categories_list <- list(age = c("age1524", "age2534", "age3544"), 
    edu = c("nohs", "hs", "somecoll", "coll"),
    insurance = c("medicaid", "nonmedicaid"),
    marital = c("married", "unmarried"),
    race = c("nhwhite", "nhblack", "hisp", "otherraceeth"),
    total = c("total"))
categories <- categories_list[[type]]

if(type == "marital")
  df <- df %>% filter(state != "California")
```

```{r load_data}
## Load all datasets
all_samples <- read_csv(sprintf("%s_%s_%i_%s.csv", csv_prefix, type, model_rank, suffix))

agg_category_name = "total"

merged_df <- merge_draws_and_data(df, all_samples,  categories=categories, agg_category_name=agg_category_name)
draws_mat <- all_samples %>% as_draws_matrix()

quantiles_df <- merged_df %>% group_by(category, state, time) %>%
  summarize(ypred_mean=mean(ypred), 
            ypred_lower=quantile(ypred, 0.025), ypred_upper=quantile(ypred, 0.975), 
            births=mean(births), 
            dobbs_code = first(dobbs_code),
            ban = first(ban)) %>% ungroup()


```

# Violin plots

```{r}
vdiff <- make_violins(merged_df %>% filter(state == "Texas"),  
             group_var = "category", estimand="diff")
vratio <- make_violins(merged_df %>% filter(state == "Texas"),  
             group_var = "category", estimand="ratio")  

if(type != "total") {
  vdiff_in_diff <- make_violin_diffs(merged_df %>% filter(state == "Texas"),
                    estimand="diff", 
                    target="births") + xlab("") + ggtitle("Differences - Rate difference")
  vdiff_in_ratios <- make_violin_diffs(merged_df %>% filter(state == "Texas"),
                  estimand="ratio", 
                  target="births") + xlab("") + ggtitle("Differences - Rate Ratio")
  
  # Difference
  print(vdiff)
  print(vdiff_in_diff)

  # Ratio
  print(vratio)
  print(vdiff_in_ratios)
} else {
  print(vdiff)
  print(vratio)
}





```


# Summary of Effects

```{r tables}
make_table(merged_df) |> tab_header(title = "2022-05 and later")

make_table(merged_df %>% filter(time < "2023-01-01")) |> tab_header(title = "2022-05 to 2023-01 ")

make_table(merged_df, treatment_date = "2023-01-01") |> tab_header(title = "2023-01 and later") 
```

## Fits by Category

```{r fits_aggregate}

for(c in unique(merged_df$category)) {
  plts <- make_all_te_plots(merged_df, quantiles_df, state_name="Texas", category=c, target="births") 
  print(plts + plot_annotation(title = c))
}
```

# Posterior Predictive Checking

<!-- **********  Posterior Predcitive Checks  ********** -->

```{r}
## INCLUDE CATEGORIES HERE FOR PPCS
categories <- c("total", categories)
ppc_states <- c("Texas")
ppc_outcome <- "births"
model_fits_file <- params$model_fits_file
```
{{< include _predictive_checks.qmd >}}
<!-- **************************************************** -->


```{r}
# all_samples <- read_csv(sprintf("%s_%s_%i_%s.csv", csv_prefix, "age", 8, suffix))
# all_samples %>% pull("hierarchical_scale") %>% summary()
# all_samples %>% ggplot(aes(x=`.draw`, y=`hierarchical_scale`)) + geom_line()

```


```{r}
all_samples
```